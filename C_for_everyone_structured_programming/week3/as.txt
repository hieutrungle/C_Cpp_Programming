#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define SIZE 100

typedef struct list
{
    int data;
    struct list *next;
} list;

int is_empty(const list *l) { return (l == NULL); }

list *create_list(int d)
{
    list *head = malloc(sizeof(list));
    head->data = d;
    head->next = NULL;
    return head;
}

list *add_to_front(int d, list *h)
{
    list *head = create_list(d);
    head->next = h;
    return head;
}

list *array_to_list(int d[], int size)
{
    list *head = create_list(d[0]);
    int i;
    for (i = 1; i < size; i++)
    {
        head = add_to_front(d[i], head);
    }
    return head;
}

void print_list(list *h, char *title)
{
    printf("%s\n", title);
    int i = 0;
    while (h != NULL)
    {

        if (i != SIZE - 1)
            printf("%d, \t", h->data);
        else
            printf("%d ", h->data);

        if ((i % 5) == 4)
        {
            printf("\n");
        }

        h = h->next;
        i++;
    }
    printf("\n");
}

// This method swaps the data of two given pointers to different nodes in a linked list
void swap_nodes(list *p1, list *p2)
{
    int temp = p1->data;
    p1->data = p2->data;
    p2->data = temp;
    return;
}

void sort_list(list *h)
{
    int i, j;
    list *p1, *p2;

    for (i = SIZE - 2; i >= 0; i--)
    {
        p1 = h;
        p2 = p1->next;
        for (j = 0; j <= i; j++)
        {
            if (p1->data > p2->data)
                swap_nodes(p1, p2);
            p1 = p2;
            p2 = p2->next;
        }
    }
}

int main(void)
{

    list *l = create_list(rand() % 1000);

    int i;
    for (i = 0; i < SIZE - 1; i++)
    {
        l = add_to_front(rand() % 1000, l);
    }
    print_list(l, "Before sorting the numbers");
    sort_list(l);
    print_list(l, "After Sorting the numbers");
    return 0;
}